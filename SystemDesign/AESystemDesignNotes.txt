What are System Design Fundamentals?: Building scalable, production-ready applications is both art and science. Science, in that it requires knowledge of many topics in computer engineering; art, in that it demands an eye for making smart design choices and piecing together the right technologies. Master both disciplines and you, too, can become a Systems Expert.
	There are 4 categories of System Design Fundamentals:
		Underlying Foundational System Design Knowledge: e.g. Client Server Model, Network Protocols
		Key Characteristics of System Design: e.g. 
			1) Availability: What is system availability? System availability (also known as equipment availability or asset availability) is a metric that measures the probability that a system is not failed or undergoing a repair action when it needs to be used. There are three qualifications that need to be met for a system to be available: 
				a) Functioning equipment: Not out of service for repairs or inspections.
				b) Functioning under normal conditions: Operates in an ideal setting at an expected rate.
				c) Functioning when needed: Operational at any time production is scheduled
				System availability is used to gauge if an asset’s production potential is being maximized, which has a direct impact on the financial health of a business. It is measure in Nines. 
				Availability %				Downtime Per Year		Downtime Per Month		Downtime Per Week
				90%(One Nine)				36.5 Days				72 Hours				16.5 Hours
				99%(Two Nines)				3.65 Days				7.20 Hours				1.68 Hours
				99.5%(Two And Half Nines)	1.83 Days				3.60 Hours				50.4 Minutes
				99.9%(Three Nines)			8.76 Hours				43.8 Minutes			10.1 Minutes
				99.95%						4.38 Hours				21.56 Minutes			5.04 Minutes
				99.99%(Four Nines)			52.56 Minutes			4.32 Minutes			1.01 Minutes
				99.999%(Five Nines)			5.26 Minutes			25.9 Seconds			6.05 Seconds
				99.9999%(Six Nines)			31.5 Seconds			2.59 Seconds			0.605 Seconds
				99.99999%(Seven Nines)		3.15 Seconds			0.259 Seconds			0.0605 Seconds
			In order to ensure Availability do horizontal Scaling with replication.
			2) Latency:
			3) Throughput:
			4) Redundancy:
			5) Consistency:
		Actual Components in System Design: e.g.
			1) Load Balancers
			2) Proxies
			3) Caches
			4) Rate Limiting
			5) Leader Election
		Actual Tech: e.g.
			1) Zookeper
			2) ETCD
			3) NGINX
			4) REDIS
			5) Amazon S3
			6) Google Cloud Storage

Client Server Model: A client is a thing that talks to servers. A server is a thing that talks to clients. The client - server model is a thing made up of a bunch of clients and servers talking to one another. And that kids is how the internet works.
	Client: A machine or process that requests data or service from a server. A single machine or piece of software can be both a client and a server at the same time. For instance, a single machine could act as a server for end users and as a client for a database. 
	Server: A machine or process that provides data or service for a client, usually by listening for incoming network calls. A single machine or piece of software can be both a client and a server at the same time. For instance, a single machine could act as a server for end users and as a client for a database.
	Client Server Model: The paradigm by which modern systems are designed, which consists of clients requesting data or service from servers ans servers providing data or service to clients. 
	IP Address: An address given to each machine connected to the public internet. IPv4 addresses consist of four number separated by dots a.b.c.d where all four nmbers are between 0 and 255. Special values include: 
		127.0.0.1: Your own local machine. Also referred to as localhost. 
		192.168.x.y: Your private network. For instance, your machine and all machines on your private wifi network will usually have the 192.168 prefix.
	Port: In order for multiple programs to listen for new network connections on the same machine without colliding, they pick a port to listen on. A port is an integer between 0 and 65535 (2^16 ports total).Typically, ports 0-1023 are reserved for system ports(also called well-known ports) and shouldn't be used by user-level processes. Certain ports have pre-defined uses, and although you usually won't be required to have them memorized, they can sometimes come in handy. Below are some examples: 
		22: Secure Shell. 
		53: DNS lookup. 
		80: HTTP.
		443: HTTPS.
	DNS: Short for Domain Name System, it describes the entities and protocols involved in the translation from domain names to IP Addresses. Typically, machines makes a DNS query to a well known entity which is responsible for returning the IP address (or multiple ones) of the requested domain name in the response.

Network Protocols: IP packets. TCP headers. HTTP requests. As daunting as they may seem, these low-level networking concepts are essential to understanding how machines in a system communicate with one another. And as we all know, proper communication is key for thriving relationships! 
	3 Prerequisites: Client, Server, IP Address
	IP: Stands for Internet Protocol. This network protocol outlines how almost all machine-to-machine communications should happen in the world. Other protocols like TCP, UDP and HTTP are built on top of IP. 
	TCP: Network protocol built on top of the Internet Protocol (IP), Allows for ordered, reliable data delivery between machines over the public internet by creating a connection. TCP is usually implemented in the kernel, which exposes sockets to applications that they can use to stream data through an open connection. 
	HTTP: The HyperText Transfer Protocol is a very common network protocol implemented on top of TCP. Clients make HTTP requests, and servers respond with a response.
		Requests typically have the following schema:
			host: string (example: algoexpert.io)
			port: integer (exanple: 80 or 443)
			method: string (example: GET, PUT, POST, DELETE, OPTIONS or PATCH)
		Responses typically have the following schema: 
			status code: integer (example: 200, 401, 404)
			headers: pair list (example: "Content-Length" => 1238)
			body: opaque sequence of bytes
	IP Packet: Sometimes more broadly referred to as just a (network) packet, an IP packet is effectively the smallest unit used to describe data being sent over IP, aside from bytes. An IP packet consists of: 
		an IP header, which contains the source and destination IP addresses as well as other information related to the network. 
		a payload, which is just the data being sent over the network.
Storage: Information Storage is an incredibly complex topic that is of vital importance to systems design. 
	Databases: Databases are programs that either use disk or memory to do 2 core things: record data and query data. In general, they are themselves servers that are long lived and interact with the rest of your application through network calls, with protocols on top of TCP or even HTTP. 
		Some databases only keep records in memory, and the users of such databases are aware of the fact that those records may be lost forever if the machine or process dies. 
		For the most part though, databases need persistence of those records, and thus cannot use memory. This means that you have to write your data to disk. Anything written to disk will remain through power loss or network partitions, so that's what is used to keep permananent records. 
		Since machine die often in a large scale system, special disk partitions or volumes are used by the database processes, and those volumes can get recovered even if the machine were to go down permanently. 
	Disk: Usually refers to either HDD (hard-disk drive) or SSD(solid-state drive). Data written to disk will persist through power failures and general machine crashes. Disk is also referred to as non-volatile storage.
		SSD is far faster than HDD (see latencies of accessing data from SSD and HDD) but also far more expensive from a financial point of view. Because of that, HDD will typically be used for data that's rarely accessed or updated, but that's stored for a long time, and SSD will be used for data that's frequently accessed and updated. 
	Memory: Short for Random Access Memory (RAM). Data stored in memory will be lost when the process that has written that data dies.
	Persistent Storage: Usually refers to disk, but in general it is any form of storage that persists if the process in charge of managing it dies.
