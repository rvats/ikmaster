What are System Design Fundamentals?: Building scalable, production-ready applications is both art and science. Science, in that it requires knowledge of many topics in computer engineering; art, in that it demands an eye for making smart design choices and piecing together the right technologies. Master both disciplines and you, too, can become a Systems Expert.
	There are 4 categories of System Design Fundamentals:
		Underlying Foundational System Design Knowledge: e.g. Client Server Model, Network Protocols
		Key Characteristics of System Design: e.g. 
			1) Availability: What is system availability? System availability (also known as equipment availability or asset availability) is a metric that measures the probability that a system is not failed or undergoing a repair action when it needs to be used. / The odds of a particular server or service being up and running at any point in time, usually measured in percentages. A server that has 99% availability will be operational 99% of the time (this would be described as having two NINES of availability).
				High Availability: Used to describe systems that have particularly high levels of availability, typically 5 nines or more; sometimes abbreviated "HA".
				Nines: Typically refers to percentages of uptime. For example, 5 nines of availability means an uptime of 99.999% of time. Below are the downtimes expected per year depending on those 9s:
				99% (two 9s): 87.7 hours
				99.9% (three 9s): 8.8 hours
				99.99% (four 9s): 52.6 minutes
				99.999%: 5.3 minutes
				Redundancy: The process of replicating parts of a system in an effort to make it more reliable. 
				SLA: Short for "Service Level Agreement", an SLA is a collection of guarantees given to a customer by a service provider. SLAs typically make guarantees on a system's availability, amongst other things. SLAs are made up of one or multiple SLOs. 
				SLO: Short for "Service Level Objective", an SLO is a guarantee given to a customer by a service provider. SLOs typically make guarantees on a system's availability, amongst other things. SLOs constitute an SLA.
			There are three qualifications that need to be met for a system to be available: 
				a) Functioning equipment: Not out of service for repairs or inspections.
				b) Functioning under normal conditions: Operates in an ideal setting at an expected rate.
				c) Functioning when needed: Operational at any time production is scheduled
				System availability is used to gauge if an asset’s production potential is being maximized, which has a direct impact on the financial health of a business. It is measure in Nines. 
				Availability %				Downtime Per Year		Downtime Per Month		Downtime Per Week
				90%(One Nine)				36.5 Days				72 Hours				16.5 Hours
				99%(Two Nines)				3.65 Days				7.20 Hours				1.68 Hours
				99.5%(Two And Half Nines)	1.83 Days				3.60 Hours				50.4 Minutes
				99.9%(Three Nines)			8.76 Hours				43.8 Minutes			10.1 Minutes
				99.95%						4.38 Hours				21.56 Minutes			5.04 Minutes
				99.99%(Four Nines)			52.56 Minutes			4.32 Minutes			1.01 Minutes
				99.999%(Five Nines)			5.26 Minutes			25.9 Seconds			6.05 Seconds
				99.9999%(Six Nines)			31.5 Seconds			2.59 Seconds			0.605 Seconds
				99.99999%(Seven Nines)		3.15 Seconds			0.259 Seconds			0.0605 Seconds
			In order to ensure Availability do horizontal Scaling with replication.
			2) Latency: The time it takes for a certain operation to complete in a system. Most often this measure is a time duration, like milliseconds or seconds. You should know these orders of magnitude:
				Reading 1MB from RAM: 250 microseconds (0.25 milliseconds)
				Reading 1MB from SSD: 1,000 microseconds (1 milliseconds)
				Transferring 1MB over Network: 10,000 microseconds (10 milliseconds)
				Reading 1MB from HDD: 20,000 microseconds (20 ms)
				Inter-Continental Round Trip: 150,000 microseconds (150 ms)
			3) Throughput: The number of operations that a system can handle properly per time unit. For instance the throughput of a server can often be measured in requests per second (RPS or QPS).
			4) Redundancy:
			5) Consistency:
		Actual Components in System Design: e.g.
			1) Load Balancers
			2) Proxies
			3) Caches
			4) Rate Limiting
			5) Leader Election
		Actual Tech: e.g.
			1) Zookeper
			2) ETCD
			3) NGINX
			4) REDIS
			5) Amazon S3
			6) Google Cloud Storage

Client Server Model: A client is a thing that talks to servers. A server is a thing that talks to clients. The client - server model is a thing made up of a bunch of clients and servers talking to one another. And that kids is how the internet works.
	Client: A machine or process that requests data or service from a server. A single machine or piece of software can be both a client and a server at the same time. For instance, a single machine could act as a server for end users and as a client for a database. 
	Server: A machine or process that provides data or service for a client, usually by listening for incoming network calls. A single machine or piece of software can be both a client and a server at the same time. For instance, a single machine could act as a server for end users and as a client for a database.
	Client Server Model: The paradigm by which modern systems are designed, which consists of clients requesting data or service from servers ans servers providing data or service to clients. 
	IP Address: An address given to each machine connected to the public internet. IPv4 addresses consist of four number separated by dots a.b.c.d where all four nmbers are between 0 and 255. Special values include: 
		127.0.0.1: Your own local machine. Also referred to as localhost. 
		192.168.x.y: Your private network. For instance, your machine and all machines on your private wifi network will usually have the 192.168 prefix.
	Port: In order for multiple programs to listen for new network connections on the same machine without colliding, they pick a port to listen on. A port is an integer between 0 and 65535 (2^16 ports total).Typically, ports 0-1023 are reserved for system ports(also called well-known ports) and shouldn't be used by user-level processes. Certain ports have pre-defined uses, and although you usually won't be required to have them memorized, they can sometimes come in handy. Below are some examples: 
		22: Secure Shell. 
		53: DNS lookup. 
		80: HTTP.
		443: HTTPS.
	DNS: Short for Domain Name System, it describes the entities and protocols involved in the translation from domain names to IP Addresses. Typically, machines makes a DNS query to a well known entity which is responsible for returning the IP address (or multiple ones) of the requested domain name in the response.

Network Protocols: IP packets. TCP headers. HTTP requests. As daunting as they may seem, these low-level networking concepts are essential to understanding how machines in a system communicate with one another. And as we all know, proper communication is key for thriving relationships! 
	3 Prerequisites: Client, Server, IP Address
	IP: Stands for Internet Protocol. This network protocol outlines how almost all machine-to-machine communications should happen in the world. Other protocols like TCP, UDP and HTTP are built on top of IP. 
	TCP: Network protocol built on top of the Internet Protocol (IP), Allows for ordered, reliable data delivery between machines over the public internet by creating a connection. TCP is usually implemented in the kernel, which exposes sockets to applications that they can use to stream data through an open connection. 
	HTTP: The HyperText Transfer Protocol is a very common network protocol implemented on top of TCP. Clients make HTTP requests, and servers respond with a response.
		Requests typically have the following schema:
			host: string (example: algoexpert.io)
			port: integer (exanple: 80 or 443)
			method: string (example: GET, PUT, POST, DELETE, OPTIONS or PATCH)
		Responses typically have the following schema: 
			status code: integer (example: 200, 401, 404)
			headers: pair list (example: "Content-Length" => 1238)
			body: opaque sequence of bytes
	IP Packet: Sometimes more broadly referred to as just a (network) packet, an IP packet is effectively the smallest unit used to describe data being sent over IP, aside from bytes. An IP packet consists of: 
		an IP header, which contains the source and destination IP addresses as well as other information related to the network. 
		a payload, which is just the data being sent over the network.
Storage: Information Storage is an incredibly complex topic that is of vital importance to systems design. 
	Databases: Databases are programs that either use disk or memory to do 2 core things: record data and query data. In general, they are themselves servers that are long lived and interact with the rest of your application through network calls, with protocols on top of TCP or even HTTP. 
		Some databases only keep records in memory, and the users of such databases are aware of the fact that those records may be lost forever if the machine or process dies. 
		For the most part though, databases need persistence of those records, and thus cannot use memory. This means that you have to write your data to disk. Anything written to disk will remain through power loss or network partitions, so that's what is used to keep permananent records. 
		Since machine die often in a large scale system, special disk partitions or volumes are used by the database processes, and those volumes can get recovered even if the machine were to go down permanently. 
	Disk: Usually refers to either HDD (hard-disk drive) or SSD(solid-state drive). Data written to disk will persist through power failures and general machine crashes. Disk is also referred to as non-volatile storage.
		SSD is far faster than HDD (see latencies of accessing data from SSD and HDD) but also far more expensive from a financial point of view. Because of that, HDD will typically be used for data that's rarely accessed or updated, but that's stored for a long time, and SSD will be used for data that's frequently accessed and updated. 
	Memory: Short for Random Access Memory (RAM). Data stored in memory will be lost when the process that has written that data dies.
	Persistent Storage: Usually refers to disk, but in general it is any form of storage that persists if the process in charge of managing it dies.
Latency: The time it takes for a certain operation to complete in a system. Most often this measure is a time duration, like milliseconds or seconds. You should know these orders of magnitude:
	Reading 1MB from RAM: 250 microseconds (0.25 milliseconds)
	Reading 1MB from SSD: 1,000 microseconds (1 milliseconds)
	Transferring 1MB over Network: 10,000 microseconds (10 milliseconds)
	Reading 1MB from HDD: 20,000 microseconds (20 ms)
	Inter-Continental Round Trip: 150,000 microseconds (150 ms)
Throughput: The number of operations that a system can handle properly per time unit. For instance the throughput of a server can often be measured in requests per second (RPS or QPS).
Availability: The odds of a particular server or service being up and running at any point in time, usually measured in percentages. A server that has 99% availability will be operational 99% of the time (this would be described as having two NINES of availability).
	High Availability: Used to describe systems that have particularly high levels of availability, typically 5 nines or more; sometimes abbreviated "HA".
	Nines: Typically refers to percentages of uptime. For example, 5 nines of availability means an uptime of 99.999% of time. Below are the downtimes expected per year depending on those 9s:
	99% (two 9s): 87.7 hours
	99.9% (three 9s): 8.8 hours
	99.99% (four 9s): 52.6 minutes
	99.999%: 5.3 minutes
	Redundancy: The process of replicating parts of a system in an effort to make it more reliable. 
	SLA: Short for "Service Level Agreement", an SLA is a collection of guarantees given to a customer by a service provider. SLAs typically make guarantees on a system's availability, amongst other things. SLAs are made up of one or multiple SLOs. 
	SLO: Short for "Service Level Objective", an SLO is a guarantee given to a customer by a service provider. SLOs typically make guarantees on a system's availability, amongst other things. SLOs constitute an SLA.
Caching:
	Cache: A piece of hardware or software that stores data, typically meant to retrieve that data faster than otherwise. Caches are often used to store responses to network requests as well as results of computationally-long operations. Note that data in a cache can become stale if the main source of truth for that data (i.e., the main database behind the cache) gets updated and the cache doesn't. 
	Cache Hit: When requested data is found in a cache. 
	Cache Miss: When requested data could have been found in a cache but isn't. This is typically used to refer to a negative consequence of a system failure or of a poor design choice. For example: If a server goes down, our load balancer will have to forward requests to a new server, which will result in cache misses. 
	Cache Eviction Policy: The policy by which values get evicted or removed from a cache. Popular cache eviction policies include LRU (least recently used) FIFO (first in first out), and LFU (least-frequently used).
	Content Delivery Network: A CDN is a third-party service that acts like a cache for your servers. Sometimes, web applications can be slow for users in a particular region if your servers are located only in another region. A CDN has servers all around the world, meaning that the latency to a CDN's servers will almost always be far better than the latency to your servers. A CDN's servers are often referred to as PoPs (Points of Presence). Two of the most poular CDNs are Cloudflare and Google Cloud CDN.
Proxies: Often used by nefarious hackers to conceal their identity and obfuscate their location, these special intermediary servers boast many important real-life applications within the context of caching, access control, and censorship bypassing, amongst other things. 
	Forward Proxy: A server that sits between clients and servers and acts on behalf of the servers, typically used for logging, load balancing or caching. 
	Reverse Proxy: A server that sits between clients and servers and acts on behalf of the servers, typically used for logging, load balancing, or caching. 
	Nginx: Pronounced "Engine X" not "N Jinx" is a very popular webserver that's often used as a reverse proxy and load balancer.
Load Balancers: Relentlessly distributing network requests across multiple servers, these digital traffic cops act as watchful guardians for your system, ensuring that it operates at peak performance day and night.
	Load Balancer: A type of reverse proxy that distributes traffic across servers. Load balancers can be found in many parts of a system, from the DNS layer all the way to the database layer. 
	Server Selection Strategy: How a load balancer chooses servers when distributing traffic amongst multiple servers. Commonly used strategies include round-robin, random selection, performance-based selection (choosing the server with the best performance metrics, like the fastest response time or the least amount of traffic) and IP based routing.
	Hot Spot: When distributing a workload across a set of servers, that workload might be spread unevenly. This can happen if your sharding key or your hashing function are suboptimal, or if your workload is naturally skewed: some servers will receive a lot more traffic than others, thus creating a "hot spot".
	Nginx: Pronounced "Engine X" not "N Jinx" is a very popular webserver that's often used as a reverse proxy and load balancer.
Hashing: Hashing? Like from hash tables? Should be simple enough, right? The good news is that, yes, hashing like from hash tables. The bad news is that, no, not simple enough. The video duration and thumbnail should be ominously indicative. 
	Hashing Function: A function that takes in a specific data type (such as a string or an identifier) and outputs a number. Different inputs may have the same output, but a good hashing function attempts to minimize those hashing collisions(which is equivalent to maximizing uniformity).
	Consistent Hashing: A type of hashing that minimizes the number of keys that need to be remapped when a hash table gets resized. It's often used by load balancers to distribute traffic to servers; it minimizes the number of requests that get forwarded to different servers when new servers are added or when existing servers are brought down. 
	Rendezvous Hashing: A type of hashing also coined highest random weight hashing. Allows for minimal re-distribution of mappings when a server goes down. 
	SHA: Short for "Secure Hash Algorithms", the SHA is a collection of cryptographic hash fundtions used in the industry. These days, SHA-3 is a popular choice to use in a system.
Databases: 10 Key Terms
	Relational Database: A type of structured database in which data is stored following a tabular
	  format; often supports powerful querying using SQL.
	Non-Relational Database: In contrast with relational database (SQL databases), a type of database that is free of imposed, tabular-like structure. Non-relational databases are often referred to as NoSQL databases.
	SQL: Structured Query Language. Relational databases can be used using a derivative of SQL such as PostgreSQL in the case of Postgres.
	SQL Database: Any database that supports SQL. This term is often used synonymously with "Relational Database", though in practice, not every relational database supports SQL.
	NoSQL Database: Any database that is not SQL-compatible is called NoSQL.
	ACID Transaction: A type of database transaction that has four important properties:
		Atomicity: The operations that constitute the transaction will either all succeed or all fail. There is no in-between state.
		Consistency: The transaction cannot bring the database to an invalid state. After the transaction is committed or rolled back, the rules for each record will still apply, and all future transactions will see the effect of the transaction. Also named Strong Consistency.
		Isolation: The execution of multiple transactions concurrently will have the same effect as if they had been executed sequentially.
		Durability: Any committed transaction is written to non-volatile storage. It will not be undone by a crash, power loss, or network partition.
	Database Index: A special auxiliary data structure that allows your database to perform certain queries much faster. Indexes can typically only exist to reference structured data, like data stored in relational databases. In practice, you create an index on one or multiple columns in your database to greatly speed up read queries that you run very often, with the downside of slightly longer writes to your database, since writes have to also take place in the relevant index.
	Strong Consistency: Strong Consistency usually refers to the consistency of ACID transactions, as opposed to Eventual Consistency.
	Eventual Consistency: A consistency model which is unlike Strong Consistency. In this model, reads might return a view of the system that is stale. An eventually consistent datastore will give guarantees that the state of the database will eventually reflect writes within a time period (could be 10 seconds, or minutes).
	Postgres: This is a technology or product that you can use in your systems. A relational database that uses a dialect of SQL called PostgreSQL. Provides ACID transactions.
Key Value Stores: 4 Key Terms:
	Key-Value Store: A Key-Value Store is a flexible NoSQL database that's often used for caching and dynamic configuration. Popular options include DynamoDB, Etcd, Redis, and ZooKeeper.
	Etcd: This is a technology or product that you can use in your systems. Etcd is a strongly consistent and highly available key-value store that's often used to implement leader election in a system.	
	Redis: This is a technology or product that you can use in your systems. An in-memory key-value store. Does offer some persistent storage options but is typically used as a really fast, best-effort caching solution. Redis is also often used to implement <b>rate limiting.
	ZooKeeper: This is a technology or product that you can use in your systems. ZooKeeper is a strongly consistent, highly available key-value store. It's often used to store important configuration or to perform leader election.
Specialized Storage Paradigms: 11 Key Terms
Blob Storage: Widely used kind of storage, in small and large scale systems. They don’t really count as databases per se, partially because they only allow the user to store and retrieve data based on the name of the blob. This is sort of like a key-value store but usually blob stores have different guarantees. They might be slower than KV stores but values can be megabytes large (or sometimes gigabytes large). Usually people use this to store things like large binaries, database snapshots, or images and other static assets that a website might have.
	Blob storage is rather complicated to have on premise, and only giant companies like Google and Amazon have infrastructure that supports it. So usually in the context of System Design interviews you can assume that you will be able to use GCS or S3. These are blob storage services hosted by Google and Amazon respectively, that cost money depending on how much storage you use and how often you store and retrieve blobs from that storage.
Time Series Database: A TSDB is a special kind of database optimized for storing and analyzing time-indexed data: data points that specifically occur at a given moment in time. Examples of TSDBs are InfluxDB, Prometheus, and Graphite.
Graph Database: A type of database that stores data following the graph data model. Data entries in a graph database can have explicitly defined relationships, much like nodes in a graph can have edges. 
	Graph databases take advantage of their underlying graph structure to perform complex queries on deeply connected data very fast.
	Graph databases are thus often preferred to relational databases when dealing with systems where data points naturally form a graph and have multiple levels of relationships—for example, social networks.
Cypher: A graph query language that was originally developed for the Neo4j graph database, but that has since been standardized to be used with other graph databases in an effort to make it the "SQL for graphs.
	Cypher queries are often much simpler than their SQL counterparts. Example: Cypher query to find data in Neo4j, a popular graph database:
	MATCH (some_node:SomeLabel)-[:SOME_RELATIONSHIP]-&gt;(some_other_node:SomeLabel {some_property:'value'})
Spatial Database: A type of database optimized for storing and querying spatial data like locations on a map. Spatial databases rely on spatial indexes like quadtrees to quickly perform spatial queries like finding all locations in the vicinity of a region.
Quadtree: A tree data structure most commonly used to index two-dimensional spatial data. Each node in a quadtree has either zero children nodes (and is therefore a leaf node) or exactly four children nodes.
	Typically, quadtree nodes contain some form of spatial data—for example, locations on a map—with a maximum capacity of some specified number n. So long as nodes aren't at capacity, they remain leaf nodes; once they reach capacity, they're given four children nodes, and their data entries are split across the four children nodes. 
	A quadtree lends itself well to storing spatial data because it can be represented as a grid filled with rectangles that are recursively subdivided into four sub-rectangles, where each quadtree node is represented by a rectangle and each rectangle represents a spatial region. Assuming we're storing locations in the world, we can imagine a quadtree with a maximum node-capacity n as follows: 
	The root node, which represents the entire world, is the outermost rectangle.
	If the entire world has more than <b>n</b> locations, the outermost rectangle is divided into four quadrants, each representing a region of the world. 
	So long as a region has more than n locations, its corresponding rectangle is subdivided into four quadrants (the corresponding node in the quadtree is given four children nodes).
	Regions that have fewer than <b>n</b> locations are undivided rectangles (leaf nodes).
	The parts of the grid that have many subdivided rectangles represent densely populated areas (like cities), while the parts of the grid that have few subdivided rectangles represent sparsely populated areas (like rural areas).
	Finding a given location in a perfect quadtree is an extremely fast operation that runs in log(x) to the base 4 time (where x is the total number of locations), since quadtree nodes have four children nodes.
Google Cloud Storage: This is a technology or product that you can use in your systems. GCS is a blob storage service provided by Google.
S3: This is a technology or product that you can use in your systems. S3 is a blob storage service provided by Amazon through Amazon Web Services (AWS).
InfluxDB: This is a technology or product that you can use in your systems. A popular open-source time series database.
Prometheus: This is a technology or product that you can use in your systems. A popular open-source time series database, typically used for monitoring purposes.
Neo4j: This is a technology or product that you can use in your systems. A popular graph database that consists of nodes, relationships, properties, and labels. 